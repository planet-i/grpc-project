// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: grpc_project.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InitServiceClient is the client API for InitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InitServiceClient interface {
	// 定义服务方法
	Init(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*BoolReply, error)
}

type initServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInitServiceClient(cc grpc.ClientConnInterface) InitServiceClient {
	return &initServiceClient{cc}
}

func (c *initServiceClient) Init(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/proto.InitService/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitServiceServer is the server API for InitService service.
// All implementations must embed UnimplementedInitServiceServer
// for forward compatibility
type InitServiceServer interface {
	// 定义服务方法
	Init(context.Context, *NoParam) (*BoolReply, error)
	mustEmbedUnimplementedInitServiceServer()
}

// UnimplementedInitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInitServiceServer struct {
}

func (UnimplementedInitServiceServer) Init(context.Context, *NoParam) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedInitServiceServer) mustEmbedUnimplementedInitServiceServer() {}

// UnsafeInitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitServiceServer will
// result in compilation errors.
type UnsafeInitServiceServer interface {
	mustEmbedUnimplementedInitServiceServer()
}

func RegisterInitServiceServer(s grpc.ServiceRegistrar, srv InitServiceServer) {
	s.RegisterService(&InitService_ServiceDesc, srv)
}

func _InitService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InitService/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServiceServer).Init(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

// InitService_ServiceDesc is the grpc.ServiceDesc for InitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InitService",
	HandlerType: (*InitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _InitService_Init_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_project.proto",
}
